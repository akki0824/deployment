pipeline{
    agent any
    parameters{
        choice(name: 'action', choices: 'deploy\nstopdeployment', description: 'starts or stops deployments')
        string(name: 'cluster_name', defaultValue: 'EKS-deployment' )
        string(name: 'region', defaultValue: 'us-east-1' )
        string(name: 'profile', defaultValue: 'test' )


    }
    environment{
        ACCESS_KEY = credentials('aws-cred')
 }
    stages{
        stage('Checkout'){
            steps{
                git branch: 'master', url: 'https://github.com/akki0824/deployment'
            }
        }
        stage('EKS login'){
            steps{
                script{withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-cred', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']])
                {
        sh """
        aws eks update-kubeconfig --name ${params.cluster_name} --region ${params.region}
        """;
                }
                }
            }
        }         // aws configure set aws_accces_key_id '$ACCESS_KEY_ACCESS_KEY_ID'
        // aws configure set aws_secret_access_key '$ACCESS_KEY_SECRET_ACCESS_KEY'
        // aws configure set region ""         aws configure "$ACCESS_KEY"
        //aws configure "$SECRET_KEY"
        //aws configure set region ""

//--profile ${params.profile}

        stage('Deployment Based on confirmation'){
            when { expression { params.action == 'deploy' }}
            steps{
                script{
                    def apply = false
                    try{ //if you start deployment asks for confirm and proceeds with apply variable
                        input message: 'please confirm to initiate deployments', ok: 'ready to deploy yamls'
                        apply = true
                    } //if user neglected catch(err) is to not fail the pipeline 
                    catch(err){
                        apply = false 
                        CurrentBuild.result= 'UNSTABLE'
                    }
                    if(apply){
                        sh """
                         kubectl apply -f .
                        """;
                    }
                }
            }
        }
        // stage('Stage 2') {
        //     steps {
        //         script {
        //             try {
        //                 // Your stage 2 steps here
        //             } catch (Exception e) {
        //                 currentBuild.result = 'FAILURE'
        //                 echo "Stage 2 failed! Sending email notification..."
        //                 emailext (
        //                     subject: "Jenkins Notification",
        //                     body: "Stage 2 failed in ${env.JOB_NAME} build #${env.BUILD_NUMBER}\n\n${BUILD_URL}",
        //                     to: 'thoutamakhilsai1997@gmail.com',
        //                     mimeType: 'text/html'
        //                 )
        //                 // Throw the exception to mark the build as failed
        //                 throw e
        //             }
        //         }
        //     }
        // }
    }
}